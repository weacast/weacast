import{_ as e,c as a,o as t,ak as r}from"./chunks/framework.B3JW-Vb0.js";const b=JSON.parse('{"title":"Alert plugin","description":"","frontmatter":{},"headers":[],"relativePath":"api/alert.md","filePath":"api/alert.md"}'),o={name:"api/alert.md"},s=r('<h1 id="alert-plugin" tabindex="-1"><a href="https://github.com/weacast/weacast-alert" target="_blank" rel="noreferrer">Alert plugin</a> <a class="header-anchor" href="#alert-plugin" aria-label="Permalink to &quot;[Alert plugin](https://github.com/weacast/weacast-alert)&quot;">​</a></h1><p>Alerts are user-defined conditions automatically and continuously evaluated on streamed probe results as new forecast data are gathered. It can be viewed as an automated query of the <a href="./probe.html">Probe results API</a> that will raise an event whenever a matching result is found. With alert you can create triggers which will fire on an occurrence of the selected weather conditions (temperature, humidity, pressure, etc.) in a specified period of time and area.</p><h2 id="alerts-api" tabindex="-1">Alerts API <a class="header-anchor" href="#alerts-api" aria-label="Permalink to &quot;Alerts API&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>On the client/server side the API is exposed using the <a href="https://docs.feathersjs.com/api/client.html#universal-isomorphic-api" target="_blank" rel="noreferrer">Feathers isomorphic API</a>and the <a href="https://docs.feathersjs.com/api/databases/querying.html" target="_blank" rel="noreferrer">Feathers common database query API</a></p></div><p>The plugin exposes the available probes through the <code>alerts</code> service. Although only web sockets are usually used on the client side, both the <a href="https://docs.feathersjs.com/api/rest.html" target="_blank" rel="noreferrer">REST</a> and the <a href="https://docs.feathersjs.com/api/socketio.html" target="_blank" rel="noreferrer">Socket</a> interfaces are configured.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>update</code>, <code>patch</code> methods are not allowed on alerts for now, you will have to recreate an alert to update it.</p></div><h3 id="data-model" tabindex="-1">Data model <a class="header-anchor" href="#data-model" aria-label="Permalink to &quot;Data model&quot;">​</a></h3><p>The common data model of an alert as used by the API is <a href="./../architecture/data-model-view.html#alert-data-model">detailed here</a>.</p><h3 id="create-an-alert" tabindex="-1">Create an alert <a class="header-anchor" href="#create-an-alert" aria-label="Permalink to &quot;Create an alert&quot;">​</a></h3><p><strong>Coming soon !</strong></p><h3 id="remove-an-alert" tabindex="-1">Remove an alert <a class="header-anchor" href="#remove-an-alert" aria-label="Permalink to &quot;Remove an alert&quot;">​</a></h3><p><strong>Coming soon !</strong></p><h2 id="alert-hooks" tabindex="-1">Alert hooks <a class="header-anchor" href="#alert-hooks" aria-label="Permalink to &quot;Alert hooks&quot;">​</a></h2><p>The following hooks are executed on the alert service.</p><h3 id="marshallalert-hook-source" tabindex="-1">.marshallAlert(hook) <a href="https://github.com/weacast/weacast-alert/blob/master/src/hooks/alerting.js" target="_blank" rel="noreferrer">source</a> <a class="header-anchor" href="#marshallalert-hook-source" aria-label="Permalink to &quot;.marshallAlert(hook) [source](https://github.com/weacast/weacast-alert/blob/master/src/hooks/alerting.js)&quot;">​</a></h3><p>Convert from server side types (moment dates) to basic JS types when &quot;writing&quot; to DB adapters. Because conditions contains Mongo reserved keywords they will be serialized as well.</p><h3 id="unmarshallalert-hook-source" tabindex="-1">.unmarshallAlert(hook) <a href="https://github.com/weacast/weacast-alert/blob/master/src/hooks/alerting.js" target="_blank" rel="noreferrer">source</a> <a class="header-anchor" href="#unmarshallalert-hook-source" aria-label="Permalink to &quot;.unmarshallAlert(hook) [source](https://github.com/weacast/weacast-alert/blob/master/src/hooks/alerting.js)&quot;">​</a></h3><p>Convert back to server side types (moment dates) from basic JS types when &quot;reading&quot; from DB adapters. Will unserialize conditions as well.</p>',18),l=[s];function i(n,h,c,d,u,m){return t(),a("div",null,l)}const f=e(o,[["render",i]]);export{b as __pageData,f as default};
