import{_ as e,c as a,o as s,ak as i}from"./chunks/framework.B3JW-Vb0.js";const t="/weacast/assets/application-hooks.BEdNITxI.svg",u=JSON.parse('{"title":"Application","description":"","frontmatter":{},"headers":[],"relativePath":"api/application.md","filePath":"api/application.md"}'),n={name:"api/application.md"},r=i(`<h1 id="application" tabindex="-1">Application <a class="header-anchor" href="#application" aria-label="Permalink to &quot;Application&quot;">​</a></h1><h2 id="backend-setup" tabindex="-1">Backend setup <a class="header-anchor" href="#backend-setup" aria-label="Permalink to &quot;Backend setup&quot;">​</a></h2><p>Weacast <a href="https://github.com/weacast/weacast" target="_blank" rel="noreferrer">core module</a> provides a helper to quickly initialize what is required for your <a href="https://docs.feathersjs.com/api/application.html" target="_blank" rel="noreferrer">server application</a>. The core module provides the ability to initialize a new Weacast application instance, attach it to the configured database and setup authentication:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { weacast } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@weacast/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> weacast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Connect to DB</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication&quot;">​</a></h3><p>Weacast includes a built-in local authentication strategy based on the <a href="https://docs.feathersjs.com/api/authentication/server.html" target="_blank" rel="noreferrer">Feathers authentication module</a>. It also automatically configures the <a href="https://docs.feathersjs.com/api/authentication/oauth2.html" target="_blank" rel="noreferrer">Feathers OAuth2 plugin</a> for <a href="https://github.com/jaredhanson/passport-github" target="_blank" rel="noreferrer">GitHub</a>, <a href="https://github.com/jaredhanson/passport-google-oauth2" target="_blank" rel="noreferrer">Google</a>, <a href="https://github.com/kalisio/passport-openidconnect" target="_blank" rel="noreferrer">OpenID Connect</a> and <a href="https://github.com/bainweb/passport-oauth2-cognito" target="_blank" rel="noreferrer">Congnito</a> if you provide them in your <a href="./../guides/basics.html#configuring">configuration file</a>.</p><p>You can read <a href="https://blog.feathersjs.com/how-to-setup-oauth-flow-with-featherjs-522bdecb10a8" target="_blank" rel="noreferrer">this article</a> to learn more about the underlying process.</p><h3 id="https-support" tabindex="-1">HTTPS support <a class="header-anchor" href="#https-support" aria-label="Permalink to &quot;HTTPS support&quot;">​</a></h3><p>Adding the right configuration like below you can easily Weacast run under <a href="https://docs.feathersjs.com/api/express.html#https" target="_blank" rel="noreferrer">HTTPS</a>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server.key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server.crt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTPS_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8084</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="client-setup" tabindex="-1">Client setup <a class="header-anchor" href="#client-setup" aria-label="Permalink to &quot;Client setup&quot;">​</a></h2><p>The Weacast <a href="https://github.com/weacast/weacast" target="_blank" rel="noreferrer">core module</a> provides a helper to quickly initialize what is required for your <a href="https://docs.feathersjs.com/api/client.html" target="_blank" rel="noreferrer">client application</a>.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { weacast } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@weacast/core/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize API wrapper</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> weacast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Retrieve a given service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> probes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;probes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="application-api" tabindex="-1">Application API <a class="header-anchor" href="#application-api" aria-label="Permalink to &quot;Application API&quot;">​</a></h2><h3 id="getservice-name-backend-client" tabindex="-1">.getService(name) - backend/client <a class="header-anchor" href="#getservice-name-backend-client" aria-label="Permalink to &quot;.getService(name) - backend/client&quot;">​</a></h3><p>Retrieve the given service by name, should replace <a href="https://docs.feathersjs.com/api/application.html#servicepath" target="_blank" rel="noreferrer">Feathers service method</a> so that you are abstracted away from service path (i.e. API prefix) and only refer to it by internal name.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>On the client side this is also used to instantiate the service on first call.</p></div><h3 id="getelementservices-name-backend-only" tabindex="-1">.getElementServices(name) - backend only <a class="header-anchor" href="#getelementservices-name-backend-only" aria-label="Permalink to &quot;.getElementServices(name) - backend only&quot;">​</a></h3><p>Retrieve all forecast element services related to a forecast model (or all if not provided) instance by name.</p><h3 id="createservice-name-app-modelspath-servicespath-backend-only" tabindex="-1">.createService(name, app, modelsPath, servicesPath) - backend only <a class="header-anchor" href="#createservice-name-app-modelspath-servicespath-backend-only" aria-label="Permalink to &quot;.createService(name, app, modelsPath, servicesPath) - backend only&quot;">​</a></h3><p>Create a new service attached to the application by name and given a set of directories where to find model/service</p><p>This assumes you have created a <em>models</em> and <em>services</em> directories containing the required files to declare your service, e.g. your folder/file hierarchy should look like this:</p><ul><li><em>index.js</em></li><li><em>models</em> : constains one file per database adapter you&#39;d like to support, e.g. <ul><li><em>serviceName.model.mongodb.js</em> : exporting the data model managed by your service in <a href="https://docs.feathersjs.com/api/databases/mongodb.html" target="_blank" rel="noreferrer">MongoDB</a></li></ul></li><li><em>services</em><ul><li><em>serviceName</em><ul><li><em>serviceName.hooks.js</em> : exporting the <a href="https://docs.feathersjs.com/api/hooks.html" target="_blank" rel="noreferrer">hooks</a> of your service,</li><li><em>serviceName.filters.js</em> : exporting the <a href="https://docs.feathersjs.com/api/events.html#event-filtering" target="_blank" rel="noreferrer">filters</a> of your service,</li><li><em>serviceName.service.js</em> : exporting the specific mixin associated to your service (optional)</li></ul></li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Only <a href="https://docs.feathersjs.com/api/databases/mongodb.html" target="_blank" rel="noreferrer">MongoDB</a> is officially supported right now although we had an experimental attempt with <a href="https://github.com/feathersjs/feathers-levelup" target="_blank" rel="noreferrer">LevelUP</a> as well. Please contact us if you&#39;d like to support more adapters.</p></div><h3 id="createelementservice-forecast-element-app-servicespath-backend-only" tabindex="-1">.createElementService(forecast, element, app, servicesPath) - backend only <a class="header-anchor" href="#createelementservice-forecast-element-app-servicespath-backend-only" aria-label="Permalink to &quot;.createElementService(forecast, element, app, servicesPath) - backend only&quot;">​</a></h3><p>Internally used by <a href="./plugin.html">forecast model plugins</a>, similar to above but using the built-in forecast element model.</p><h2 id="application-hooks" tabindex="-1">Application Hooks <a class="header-anchor" href="#application-hooks" aria-label="Permalink to &quot;Application Hooks&quot;">​</a></h2><p>The following <a href="./hooks.html">hooks</a> are globally executed on the application: <img src="`+t+'" alt="Application hooks"></p>',28),l=[r];function h(p,o,c,k,d,m){return s(),a("div",null,l)}const b=e(n,[["render",h]]);export{u as __pageData,b as default};
