import{_ as e,c as a,o,ak as r}from"./chunks/framework.B3JW-Vb0.js";const k=JSON.parse('{"title":"Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"api/hooks.md","filePath":"api/hooks.md"}'),t={name:"api/hooks.md"},s=r('<h1 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;Hooks&quot;">​</a></h1><p>Weacast <a href="https://github.com/weacast/weacast" target="_blank" rel="noreferrer">core module</a> provides a collection of common <a href="https://docs.feathersjs.com/api/hooks.html" target="_blank" rel="noreferrer">hooks</a> to be used by plugins or <a href="https://docs.feathersjs.com/api/client.html" target="_blank" rel="noreferrer">client applications</a>. They also rely on <a href="https://docs.feathersjs.com/api/hooks-common.html" target="_blank" rel="noreferrer">Feathers common hooks</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://docs.feathersjs.com/api/hooks.html" target="_blank" rel="noreferrer">Hooks</a> are the main way to introduce business logic into applications and plugins so we recommend to understand them well first before reading this.</p></div><h2 id="data-model-management" tabindex="-1">Data model management <a class="header-anchor" href="#data-model-management" aria-label="Permalink to &quot;Data model management&quot;">​</a></h2><p><a href="https://github.com/weacast/weacast/packages/core/blob/master/src/hooks/marshall.js" target="_blank" rel="noreferrer">source</a></p><h3 id="marshall-hook" tabindex="-1">.marshall(hook) <a class="header-anchor" href="#marshall-hook" aria-label="Permalink to &quot;.marshall(hook)&quot;">​</a></h3><p>Converts from server side types (e.g. moment dates) to basic JS types, which is usually required when writing to the database.</p><h3 id="unmarshall-hook" tabindex="-1">.unmarshall(hook) <a class="header-anchor" href="#unmarshall-hook" aria-label="Permalink to &quot;.unmarshall(hook)&quot;">​</a></h3><p>Converts back to server side types (e.g. moment dates) from basic JS types, which is usually required when reading from the database.</p><h2 id="query-management" tabindex="-1">Query management <a class="header-anchor" href="#query-management" aria-label="Permalink to &quot;Query management&quot;">​</a></h2><p><a href="https://github.com/weacast/weacast/packages/core/blob/master/src/hooks/query.js" target="_blank" rel="noreferrer">source</a></p><h3 id="marshallquery-hook" tabindex="-1">.marshallQuery(hook) <a class="header-anchor" href="#marshallquery-hook" aria-label="Permalink to &quot;.marshallQuery(hook)&quot;">​</a></h3><p>Converts from client/server side types (e.g. strings or moment dates) to basic JS types, which is usually required when querying the database.</p><h3 id="marshallcomparisonquery-hook" tabindex="-1">.marshallComparisonQuery(hook) <a class="header-anchor" href="#marshallcomparisonquery-hook" aria-label="Permalink to &quot;.marshallComparisonQuery(hook)&quot;">​</a></h3><p>Converts from client/server side comparison types (e.g. numbers) to basic JS types, which is usually required when querying the database. Applies to <code>$lt</code>, <code>$lte</code>, <code>$gt</code> and <code>$gte</code> operators.</p><h3 id="marshallspatialquery-hook" tabindex="-1">.marshallSpatialQuery(hook) <a class="header-anchor" href="#marshallspatialquery-hook" aria-label="Permalink to &quot;.marshallSpatialQuery(hook)&quot;">​</a></h3><p>Converts from client/server side spatial types (e.g. coordinates or numbers) to basic JS types, which is usually required when querying the database. Applies to <a href="https://docs.mongodb.com/manual/reference/operator/query-geospatial/" target="_blank" rel="noreferrer">MongoDB geospatial operators</a>.</p><h3 id="processforecasttime-hook" tabindex="-1">.processForecastTime(hook) <a class="header-anchor" href="#processforecasttime-hook" aria-label="Permalink to &quot;.processForecastTime(hook)&quot;">​</a></h3><p>Find the nearest forecast date/time corresponding to a requested date/time or date/time range.</p><h3 id="processdata-hook" tabindex="-1">.processData(hook) <a class="header-anchor" href="#processdata-hook" aria-label="Permalink to &quot;.processData(hook)&quot;">​</a></h3><p>Discard or retrieve forecast data when required depending on the query parameters.</p><h2 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging&quot;">​</a></h2><p><a href="https://github.com/weacast/weacast/packages/core/blob/master/src/hooks/logger.js" target="_blank" rel="noreferrer">core source</a></p><h3 id="log-hook" tabindex="-1">.log(hook) <a class="header-anchor" href="#log-hook" aria-label="Permalink to &quot;.log(hook)&quot;">​</a></h3><ul><li>Log error for each hook in error with error log level.</li><li>Log information for each hook ran with verbose (respectively debug for client) log level.</li><li>Log detailed information for each hook ran with debug (respectively trace for client) log level.</li></ul><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h2><p><a href="https://github.com/weacast/weacast-app/blob/master/src/hooks/events.js" target="_blank" rel="noreferrer">source</a></p><h3 id="emit-hook" tabindex="-1">.emit(hook) <a class="header-anchor" href="#emit-hook" aria-label="Permalink to &quot;.emit(hook)&quot;">​</a></h3><p>Emit an event named <code>{hook_type}Hook</code> (e.g. <code>beforeHook</code> or <code>afterHook</code>) for each hook ran, the payload of the event being the hook object.</p><h2 id="by-type" tabindex="-1">By type <a class="header-anchor" href="#by-type" aria-label="Permalink to &quot;By type&quot;">​</a></h2><ul><li><a href="./application.html#application-hooks">Application</a></li><li><a href="./forecast.html#forecast-model-hooks">Forecast model service</a></li><li><a href="./element.html#forecast-element-hooks">Forecast element service</a></li><li><a href="./probe.html#probe-hooks">Probe service</a></li><li><a href="./probe.html#probe-results-hooks">Probe results service</a></li></ul>',31),h=[s];function l(i,n,c,m,d,p){return o(),a("div",null,h)}const b=e(t,[["render",l]]);export{k as __pageData,b as default};
