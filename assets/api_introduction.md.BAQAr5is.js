import{_ as e,c as t,o as a,ak as o}from"./chunks/framework.B3JW-Vb0.js";const m=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"api/introduction.md","filePath":"api/introduction.md"}'),r={name:"api/introduction.md"},i=o('<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><p>These sections detail the external (i.e. REST/Websocket) as well as the internal (i.e. Classes/Functions) <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noreferrer">API</a> of <strong>Weacast</strong>.</p><p>You might read this <a href="https://blog.feathersjs.com/feathersjs-in-production-configuration-api-prefixing-logging-and-error-catching-2a80e044e233" target="_blank" rel="noreferrer">introduction article</a> about using Feathers in production because it has been used as a guideline for the development Weacast.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All dates/times in Weacast are managed as <a href="https://momentjs.com" target="_blank" rel="noreferrer">moment</a> objects and expressed in <a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time" target="_blank" rel="noreferrer">UTC</a>.</p></div><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><p>You will find <a href="https://documenter.getpostman.com/view/3473756/RznFoxza" target="_blank" rel="noreferrer">here</a> a collection of ready-to-go REST requests to test the API with the great <a href="https://www.getpostman.com/" target="_blank" rel="noreferrer">POSTMAN</a> tool. Simply download it and import it in your POSTMAN installation.</p><p>You should do the following:</p><ol><li>make your Weacast installation run (the collection is configured for default dev port <code>8080</code> but you can easily switch to <code>8081</code> for production mode for instance or any other)</li><li>use the authenticate request with a registered user e-mail/password to retrieve an authorization token</li><li>set this token in the header of other requests in order to be authorized to perform the request</li><li>renew your token when expired (step 2)</li></ol>',8),n=[i];function s(l,c,d,h,p,u){return a(),t("div",null,n)}const _=e(r,[["render",s]]);export{m as __pageData,_ as default};
