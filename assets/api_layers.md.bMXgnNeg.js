import{_ as e,c as a,o as t,ak as r}from"./chunks/framework.B3JW-Vb0.js";const s="/weacast/assets/feature-layer.C8Yyf5-v.png",i="/weacast/assets/windbarb-layer.DXafVlHY.png",l="/weacast/assets/flow-layer.CbDGhwUh.png",o="/weacast/assets/scalar-layer-raw.E0S-iC4G.png",n="/weacast/assets/scalar-layer-interpolated.BH3vO9Sv.png",w=JSON.parse('{"title":"Layers","description":"","frontmatter":{},"headers":[],"relativePath":"api/layers.md","filePath":"api/layers.md"}'),c={name:"api/layers.md"},h=r('<h1 id="layers" tabindex="-1">Layers <a class="header-anchor" href="#layers" aria-label="Permalink to &quot;Layers&quot;">​</a></h1><p>Weacast includes a set of <a href="http://leafletjs.com/" target="_blank" rel="noreferrer">Leaflet</a> layers to help visualize forecast data or probe results.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In the <a href="https://github.com/weacast/weacast-app" target="_blank" rel="noreferrer">demo application</a> each layer type implements the <a href="https://github.com/socib/Leaflet.TimeDimension#ltimedimensionlayer" target="_blank" rel="noreferrer">TimeDimension Layer interface</a>. If you&#39;d like to build client applications using Weacast you&#39;d better have a look to our client API layer in <a href="https://github.com/weacast/weacast-core" target="_blank" rel="noreferrer">core module</a> and dedicated map engine modules like our <a href="https://github.com/weacast/weacast-leaflet" target="_blank" rel="noreferrer">Leaflet plugin</a>.</p></div><h2 id="feature-layers" tabindex="-1">Feature Layers <a class="header-anchor" href="#feature-layers" aria-label="Permalink to &quot;Feature Layers&quot;">​</a></h2><p><a href="https://github.com/socib/Leaflet.TimeDimension#ltimedimensionlayergeojson" target="_blank" rel="noreferrer">Time-stamped GeoJson layers</a> provide a generic way to visualize <a href="https://geojson.org/geojson-spec.html#feature-objects" target="_blank" rel="noreferrer">GeoJSON features</a> including temporal evolution. Because <a href="./../architecture/data-model-view.html#probe-data-model">probes</a> and <a href="./../architecture/data-model-view.html#probe-result-data-model">probe results</a> are internally modelled as GeoJSON features they can be used to visualize them. However Weacast does not make any assumption on how you want to visualize these data so you might have to manually process the retrieved probe results in order to add a <code>time</code> property on each feature corresponding to the <code>forecastTime</code> or the <code>runTime</code> for instance.</p><p>Using <a href="./mixins.html#map-mixins">map mixins</a> configuration options you can easily customize your probe results visualization to get something like this:</p><p><img src="'+s+'" alt="Weacast feature layer"></p><p>Weacast also provides a convenient <a href="http://weather.rap.ucar.edu/info/about_windbarb.html" target="_blank" rel="noreferrer">wind barb</a> icon based on <a href="https://github.com/hulongping/windbarb" target="_blank" rel="noreferrer">leaflet-windbarb</a> that can be used to symbolize wind like this:</p><p><img src="'+i+`" alt="Weacast windbarb layer"></p><h2 id="forecast-data-layers" tabindex="-1">Forecast Data Layers <a class="header-anchor" href="#forecast-data-layers" aria-label="Permalink to &quot;Forecast Data Layers&quot;">​</a></h2><p>Weacast includes a set of <a href="http://leafletjs.com/" target="_blank" rel="noreferrer">Leaflet</a> layers to manage the temporal evolution of forecast data. Due to the possible large amount of forecast data it is recommanded to load data on-demand, although it is possible to have an internal data cache.</p><h3 id="forecastlayer-source" tabindex="-1">ForecastLayer <a href="https://github.com/weacast/weacast-leaflet/blob/master/src/layers/forecast-layer.js" target="_blank" rel="noreferrer">source</a> <a class="header-anchor" href="#forecastlayer-source" aria-label="Permalink to &quot;ForecastLayer [source](https://github.com/weacast/weacast-leaflet/blob/master/src/layers/forecast-layer.js)&quot;">​</a></h3><p>Forecast layer interface implemented by all other types of layer, based on <a href="https://github.com/socib/Leaflet.TimeDimension#ltimedimensionlayer" target="_blank" rel="noreferrer">leaflet-timedimension</a>.</p><p>A Weacast layer of type <code>ClassName</code> are created like this (where app is the Weacast <a href="./application.html#client">client app</a> instance):</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Weacast.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Forecast element to be managed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elements: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;u-wind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v-wind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Attribution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  attribution: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Forecast data from &lt;a href=&quot;http://www.meteofrance.com&quot;&gt;Météo-France&lt;/a&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="setforecastmodel-model" tabindex="-1">.setForecastModel (model) <a class="header-anchor" href="#setforecastmodel-model" aria-label="Permalink to &quot;.setForecastModel (model)&quot;">​</a></h4><p>Called by the map whenever the current forecast model changes, can be customized by child classes to do whatever required then.</p><h4 id="fetchavailabletimes" tabindex="-1">.fetchAvailableTimes() <a class="header-anchor" href="#fetchavailabletimes" aria-label="Permalink to &quot;.fetchAvailableTimes()&quot;">​</a></h4><p>Retrieve the forecast element available forecast times and configure the <a href="https://github.com/socib/Leaflet.TimeDimension#ltimedimension" target="_blank" rel="noreferrer">TimeDimension</a> object of the map accordingly.</p><h4 id="fetchdata" tabindex="-1">.fetchData() <a class="header-anchor" href="#fetchdata" aria-label="Permalink to &quot;.fetchData()&quot;">​</a></h4><p>Retrieve the forecast element data for the currently configured time in the <a href="https://github.com/socib/Leaflet.TimeDimension#ltimedimension" target="_blank" rel="noreferrer">TimeDimension</a> object of the map.</p><h4 id="getquery" tabindex="-1">.getQuery() <a class="header-anchor" href="#getquery" aria-label="Permalink to &quot;.getQuery()&quot;">​</a></h4><p>Build the query object to retrieve forecast element data, can be customized by child classes. By default create a query to retrieve data with the currently configured forecast model (i.e. bounds, resolution, etc.) and time in map.</p><h4 id="setdata-data" tabindex="-1">.setData(data) <a class="header-anchor" href="#setdata-data" aria-label="Permalink to &quot;.setData(data)&quot;">​</a></h4><p>To be implemented by child classes, data contains an array of data array for each configured forecast element in the layer.</p><h3 id="flowlayer-source" tabindex="-1">FlowLayer <a href="https://github.com/weacast/weacast-leaflet/blob/master/src/layers/flow-layer.js" target="_blank" rel="noreferrer">source</a> <a class="header-anchor" href="#flowlayer-source" aria-label="Permalink to &quot;FlowLayer [source](https://github.com/weacast/weacast-leaflet/blob/master/src/layers/flow-layer.js)&quot;">​</a></h3><p>To visualize forecast paired element as flow (e.g. wind direction), based on <a href="https://github.com/danwild/leaflet-velocity" target="_blank" rel="noreferrer">leaflet-velocity</a>.</p><p><img src="`+l+'" alt="Weacast flow layer"></p><h3 id="scalarlayer-source" tabindex="-1">ScalarLayer <a href="https://github.com/weacast/weacast-leaflet/blob/master/src/layers/scalar-layer.js" target="_blank" rel="noreferrer">source</a> <a class="header-anchor" href="#scalarlayer-source" aria-label="Permalink to &quot;ScalarLayer [source](https://github.com/weacast/weacast-leaflet/blob/master/src/layers/scalar-layer.js)&quot;">​</a></h3><p>To visualize forecast element scalar values (e.g. temperature) as a structured mesh using <a href="http://gka.github.io/chroma.js/#color-scales" target="_blank" rel="noreferrer">color maps</a>, based on <a href="https://github.com/manubb/Leaflet.PixiOverlay" target="_blank" rel="noreferrer">leaflet-pixi-overlay</a>. It provides 2 ways of rendering the data:</p><ul><li>As gridded based rendering to visualize the raw data. To each cell of the grid is assigned a data. <img src="'+o+'" alt="Weacast raw scalar layer"></li><li>An interpolated based rendering to visualize the data as color image. <img src="'+n+'" alt="Weacast interpolated scalar layer"></li></ul>',31),d=[h];function p(m,f,u,b,y,g){return t(),a("div",null,d)}const _=e(c,[["render",p]]);export{w as __pageData,_ as default};
