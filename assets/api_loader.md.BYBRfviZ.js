import{_ as a,c as e,o as s,ak as i}from"./chunks/framework.B3JW-Vb0.js";const F=JSON.parse('{"title":"Forecast data loaders","description":"","frontmatter":{},"headers":[],"relativePath":"api/loader.md","filePath":"api/loader.md"}'),t={name:"api/loader.md"},r=i(`<h1 id="forecast-data-loaders" tabindex="-1"><a href="https://github.com/weacast/weacast-loader" target="_blank" rel="noreferrer">Forecast data loaders</a> <a class="header-anchor" href="#forecast-data-loaders" aria-label="Permalink to &quot;[Forecast data loaders](https://github.com/weacast/weacast-loader)&quot;">â€‹</a></h1><p><a href="./plugin.html">Forecast model plugins</a> are modules that need to be either integrated in a monolithic Weacast application or deployed as independent micro-service like applications to be interconnected, see the <a href="./../architecture/global-architecture.html#architecture-at-scale">architecture section</a>.</p><p>Because the most consuming part of a Weacast application is usually the gathering and processing of forecast model data, the <a href="https://github.com/weacast/weacast-loader" target="_blank" rel="noreferrer">weacast-loader</a> module provides you with a set of download services available as Docker containers out-of-the-box. These services perform the same data processing workflow than the <a href="./plugin.html#arpege">ARPEGE</a>, <a href="./plugin.html#arome">AROME</a> and <a href="./plugin.html#gfs">GFS</a> plugins, based on <a href="https://kalisio.github.io/krawler/" target="_blank" rel="noreferrer">Krawler</a>. This means that your Weacast application doesn&#39;t need to integrate these plugins anymore, the running download services will feed the database as usual in the background.</p><p>The actual download services are built from generic Docker images containing required dependencies and functions used to generate a <a href="https://kalisio.github.io/krawler/how-to-use-it/api.html#external-api" target="_blank" rel="noreferrer">Krawler download job</a> tailored to your forecast model and elements: <a href="https://hub.docker.com/r/weacast/weacast-gfs/" target="_blank" rel="noreferrer">weacast-gfs</a> and <a href="https://hub.docker.com/r/weacast/weacast-arpege/" target="_blank" rel="noreferrer">weacast-arpege</a> (which also covers <a href="https://hub.docker.com/r/weacast/weacast-arome/" target="_blank" rel="noreferrer">weacast-arome</a> because the interface is similar).</p><p>You can use the provided Docker images with default model setups, for each model a different setup generates a different tag, e.g.:</p><ul><li><code>weacast/weacast-arpege:europe-latest</code></li><li><code>weacast/weacast-arpege:europe-1.4.0</code></li><li><code>weacast/weacast-arpege:world-latest</code></li><li><code>weacast/weacast-arpege:world-1.4.0</code></li></ul><p>You can also build the Docker images containing the different configurations of your ARPEGE, AROME and GFS services:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Manually</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-arpege-world</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dockerfile.arpege-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-gfs-world</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dockerfile.gfs-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using Docker compose file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-arpege-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-gfs-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>Then you have to run it on your infrastructure:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Stop/remove previous instances if any</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-arpege-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-gfs-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-arpege-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-gfs-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Launch new ones</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-arpege-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-gfs-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>The loaders can archive all data using the <a href="https://www.cogeo.org/" target="_blank" rel="noreferrer">COG</a> file format in a (compatible) AWS S3 bucket if you define the following environment variables:</p><ul><li><code>S3_ACCESS_KEY</code> (access key - required)</li><li><code>S3_SECRET_ACCESS_KEY</code> (secret access key - required)</li><li><code>S3_BUCKET</code> (bucket name - required)</li><li><code>S3_ENDPOINT</code> (endpoint URL - optional)</li></ul>`,12),l=[r];function n(o,h,p,c,d,k){return s(),e("div",null,l)}const u=a(t,[["render",n]]);export{F as __pageData,u as default};
