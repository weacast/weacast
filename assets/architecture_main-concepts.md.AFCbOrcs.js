import{_ as e,c as t,o as a,ak as r}from"./chunks/framework.B3JW-Vb0.js";const g=JSON.parse('{"title":"Main concepts","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/main-concepts.md","filePath":"architecture/main-concepts.md"}'),o={name:"architecture/main-concepts.md"},s=r('<h1 id="main-concepts" tabindex="-1">Main concepts <a class="header-anchor" href="#main-concepts" aria-label="Permalink to &quot;Main concepts&quot;">​</a></h1><h2 id="forecast-model" tabindex="-1">Forecast model <a class="header-anchor" href="#forecast-model" aria-label="Permalink to &quot;Forecast model&quot;">​</a></h2><p>Weacast aims at gathering, exposing, and making use of weather forecast data generated by <strong>forecast models</strong>. It does often exist different <strong>instances</strong> of a forecast model producing more or less accurate data, usually in term of spatial or temporal resolution. As an example the <a href="https://www.ncdc.noaa.gov/data-access/model-data/model-datasets/global-forcast-system-gfs" target="_blank" rel="noreferrer">GFS</a> model produces data at 1° or 0.5° degree of resolution with different time steps (e.g. each 3 hours until the production time + 240 hours). The production of a set of forecast data is called a <strong>run</strong> of the model and occurs on a regular daily basis, e.g. every 6 hours.</p><p>The spatial properties of a model instance are completely defined by a <a href="./../api/grid.html">grid</a>. The temporal properties are defined by interval values describing at which frequency/time the forecast data are produced (so called <strong>run interval/time</strong>) and which time steps are available (so called <strong>forecast interval/time</strong>).</p><h2 id="forecast-element" tabindex="-1">Forecast element <a class="header-anchor" href="#forecast-element" aria-label="Permalink to &quot;Forecast element&quot;">​</a></h2><p>Each configured forecast model instance output hundreds of <strong>forecast elements</strong> (i.e. meteorological elements) such as temperature, wind direction, etc. Forecast data are continuously updated because the model instance produces new forecast data for its elements every N hours.</p><h2 id="probe" tabindex="-1">Probe <a class="header-anchor" href="#probe" aria-label="Permalink to &quot;Probe&quot;">​</a></h2><p><strong>Probes</strong> are virtual sensors used to probe forecast data at specific locations of interest (e.g. airports, cities, stores, etc.). It does exist two kind of probes:</p><ul><li><strong>on-demand probing</strong>, which allow to compute <em>on-demand</em> forecast element values for a given forecast time and a set of locations,</li><li><strong>probing stream</strong>, which allow to automatically and continuously compute forecast element values for a set of locations as new forecast data are gathered.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Probed values are computed using <a href="./../api/grid.html#interpolatelongitude-latitude">interpolation</a> of the forecast data.</p></div><h2 id="probe-results-querying" tabindex="-1">Probe results querying <a class="header-anchor" href="#probe-results-querying" aria-label="Permalink to &quot;Probe results querying&quot;">​</a></h2><p>While on-demand probing directly returns the results you asked for, probing streams generates the results continuously without your intervention. We thus need a way to query the persisted results on-demand using:</p><ul><li><strong>selectors</strong>: to find all results where an attribute has (or does not have) the specified value (e.g. forecast time);</li><li><strong>comparison operators</strong>: to find all results where the target element value is less, less or equal, greater, greater or equal than a given value;</li><li><strong>spatial operators</strong>: to find all results located within a given geometry on the ground (e.g. in a given radius around a point),</li><li><strong>aggregation operators</strong>: to aggregate all target element values for a set of forecast times.</li></ul><h2 id="alert" tabindex="-1">Alert <a class="header-anchor" href="#alert" aria-label="Permalink to &quot;Alert&quot;">​</a></h2><p><strong>Alerts</strong> are user-defined conditions automatically and continuously evaluated on streamed probe results as new forecast data are gathered. It can be viewed as an automated query of the probe results that will raise an event whenever a matching result is found. With alert you can create triggers which will fire on an occurrence of the selected weather conditions (temperature, humidity, pressure, etc.) in a specified period of time and area.</p>',15),n=[s];function i(l,c,d,u,h,p){return a(),t("div",null,n)}const f=e(o,[["render",i]]);export{g as __pageData,f as default};
