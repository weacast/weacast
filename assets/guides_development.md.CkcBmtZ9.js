import{_ as a,c as s,o as e,ak as i}from"./chunks/framework.B3JW-Vb0.js";const u=JSON.parse('{"title":"Weacast development","description":"","frontmatter":{},"headers":[],"relativePath":"guides/development.md","filePath":"guides/development.md"}'),t={name:"guides/development.md"},n=i(`<h1 id="weacast-development" tabindex="-1">Weacast development <a class="header-anchor" href="#weacast-development" aria-label="Permalink to &quot;Weacast development&quot;">​</a></h1><p>Weacast API is mainly powered by <a href="https://feathersjs.com/" target="_blank" rel="noreferrer">Feathers</a> (version 5.x). Weacast demo app is mainly powered by <a href="http://quasar-framework.org/" target="_blank" rel="noreferrer">Quasar</a> on the frontend side (version 0.13.x).</p><p>If you are not familiar with those technologies and want to develop for Weacast, in addition to read the dedicated documentation, I recommand reading <a href="https://github.com/claustres/quasar-feathers-tutorial" target="_blank" rel="noreferrer">https://github.com/claustres/quasar-feathers-tutorial</a>. Indeed, Weacast application demo is a template web application initially based on the <a href="https://github.com/quasarframework/quasar-wrapper-feathersjs-api" target="_blank" rel="noreferrer">Quasar wrapper for Feathers</a>, while Weacast plugins/modules are <a href="https://docs.feathersjs.com/guides/advanced/creating-a-plugin.html" target="_blank" rel="noreferrer">Feathers plugins</a>.</p><h2 id="setup-your-environment" tabindex="-1">Setup your environment <a class="header-anchor" href="#setup-your-environment" aria-label="Permalink to &quot;Setup your environment&quot;">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><h3 id="install-node-js" tabindex="-1">Install Node.js <a class="header-anchor" href="#install-node-js" aria-label="Permalink to &quot;Install Node.js&quot;">​</a></h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node</a> is a server platform which runs JavaScript. It&#39;s lightweight and efficient. It has the largest ecosystem of open source libraries in the world.</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Default install.</a></li><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noreferrer">Specific versions.</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In order to be able to switch easily between different versions of Node.js we recommand to use a version manager like <a href="https://github.com/tj/n" target="_blank" rel="noreferrer">n</a>/<a href="https://github.com/creationix/nvm" target="_blank" rel="noreferrer">nvm</a> under Linux/Mac or <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noreferrer">nvm</a> under Windows.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>At the time of writing Weacast modules v2.x (<code>master</code> branch) are expected to work with Node.js 16.x and Weacast modules v1.x are expected to work with Node.js 12.x</p></div><h3 id="install-git" tabindex="-1">Install Git <a class="header-anchor" href="#install-git" aria-label="Permalink to &quot;Install Git&quot;">​</a></h3><p><a href="https://git-scm.com/" target="_blank" rel="noreferrer">git</a> is the version control system most frequently used in open source. There are many resources available for installing it.</p><ul><li><a href="https://www.atlassian.com/git/tutorials/install-git#linux" target="_blank" rel="noreferrer">Linux.</a></li><li><a href="https://www.atlassian.com/git/tutorials/install-git#mac-os-x" target="_blank" rel="noreferrer">macOS.</a></li><li><a href="https://www.atlassian.com/git/tutorials/install-git#windows" target="_blank" rel="noreferrer">Windows.</a></li></ul><h3 id="install-mongodb" tabindex="-1">Install MongoDB <a class="header-anchor" href="#install-mongodb" aria-label="Permalink to &quot;Install MongoDB&quot;">​</a></h3><p><a href="https://www.mongodb.com/" target="_blank" rel="noreferrer">Mongo</a> is an open-source, document database designed for ease of development and scaling.</p><ul><li><a href="https://docs.mongodb.com/manual/administration/install-on-linux/" target="_blank" rel="noreferrer">Linux.</a></li><li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="noreferrer">macOS.</a></li><li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="noreferrer">Windows.</a></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>At the time of writing the Weacast modules v2.x (<code>master</code> branch) are expected to work with MongoDB 4.x and Weacast modules v1.x are expected to work with MongoDB 3.x</p></div><h3 id="install-yarn" tabindex="-1">Install Yarn <a class="header-anchor" href="#install-yarn" aria-label="Permalink to &quot;Install Yarn&quot;">​</a></h3><p>Due to some <a href="http://codetunnel.io/npm-5-changes-to-npm-link/" target="_blank" rel="noreferrer">changes</a> in the way <code>npm</code> manages linked modules we prefer to use <a href="https://yarnpkg.com" target="_blank" rel="noreferrer">Yarn</a> as a package manager.</p><p><a href="https://yarnpkg.com/en/docs/install" target="_blank" rel="noreferrer">Install Yarn</a> on your platform.</p><h3 id="weacast" tabindex="-1">Weacast <a class="header-anchor" href="#weacast" aria-label="Permalink to &quot;Weacast&quot;">​</a></h3><p>While it is a WIP and not yet pushed to NPM, or when developing, please use the following process.</p><p>First clone and install the Weacast monoreo, <a href="https://lerna.js.org/" target="_blank" rel="noreferrer">lerna</a> will <a href="https://docs.npmjs.com/cli/link" target="_blank" rel="noreferrer">link</a> all modules together:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/weacast/weacast.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>Then clone and install the Weacast demo app repository:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/weacast/weacast.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="develop" tabindex="-1">Develop <a class="header-anchor" href="#develop" aria-label="Permalink to &quot;Develop&quot;">​</a></h2><h3 id="weacast-1" tabindex="-1">Weacast <a class="header-anchor" href="#weacast-1" aria-label="Permalink to &quot;Weacast&quot;">​</a></h3><h3 id="running-for-development" tabindex="-1">Running for development <a class="header-anchor" href="#running-for-development" aria-label="Permalink to &quot;Running for development&quot;">​</a></h3><p>Run the server-side app (from <code>weacast/packages/api</code> project folder): <code>$ npm run dev</code></p><p>Then run the frontend app (from <code>weacast-app</code> root project folder): <code>$ npm run dev</code></p><p>Then point your browser to <a href="http://localhost:8080" target="_blank" rel="noreferrer">localhost:8080</a>.</p><h3 id="building-for-production" tabindex="-1">Building for production <a class="header-anchor" href="#building-for-production" aria-label="Permalink to &quot;Building for production&quot;">​</a></h3><p>Build the server-side app (from <code>weacast/packages/api</code> project folder): <code>$ npm run compile</code></p><p>Then build the frontend app (from <code>weacast-app</code> root project folder): <code>$ npm run build</code>.</p><p>This generates a <code>dist</code> folder <strong>to be copied into</strong> the <code>weacast/packages/api</code> root project folder.</p><h3 id="running-in-production" tabindex="-1">Running in production <a class="header-anchor" href="#running-in-production" aria-label="Permalink to &quot;Running in production&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Make sure you built your app first</p></div><p>Run the server-side app (from <code>weacast/packages/api</code> root project folder), this will also serve the frontend app : <code>$ npm run prod</code></p><p>Then point your browser to <a href="http://localhost:8081" target="_blank" rel="noreferrer">localhost:8081</a>.</p><h3 id="running-test" tabindex="-1">Running test <a class="header-anchor" href="#running-test" aria-label="Permalink to &quot;Running test&quot;">​</a></h3><p>Run the server-side tests (from <code>weacast</code> root project folder): <code>$ npm run test</code> This will lint and fix issues in the code according to <a href="https://github.com/feross/standard" target="_blank" rel="noreferrer">JS standard</a>, then execute tests using <a href="https://mochajs.org/" target="_blank" rel="noreferrer">Mocha</a> and compute code coverage using <a href="https://github.com/bcoe/c8" target="_blank" rel="noreferrer">c8</a>.</p><h3 id="debug" tabindex="-1">Debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;Debug&quot;">​</a></h3><p>Use <a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="noreferrer">Chrome DevTools</a>.</p><h3 id="testing-docker-images" tabindex="-1">Testing Docker images <a class="header-anchor" href="#testing-docker-images" aria-label="Permalink to &quot;Testing Docker images&quot;">​</a></h3><p>Because Weacast API and demo application are also released as Docker images, you can build it manually like this in development mode (i.e. with all modules linked to their <code>master</code> branch version):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dockerfile.dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-api:dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Demo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dockerfile.dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast:dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The demo application image depends on the weacast API image so that the build order is important.</p></div><p>Then test it like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// API</span></span>
<span class="line"><span>cd packages/api</span></span>
<span class="line"><span>docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d</span></span>
<span class="line"><span>// Demo application</span></span>
<span class="line"><span>cd weacast-app</span></span>
<span class="line"><span>docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d</span></span></code></pre></div><p>You can release it manually if you&#39;d like as current dev version to share progress with others:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast:dev</span></span></code></pre></div><p><strong>However, our Travis CI should build the development images for you as you commit</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When building the image all modules are retrieved from their respective repository (<code>master</code> branch), only the local source code of the demo web app is pushed into the image.</p><p>This requires you to have a DockerHub account and be a team member of the Weacast organization, if you&#39;d like to become a maintainer please tell us</p></div><h3 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h3><p>Weacast plugins are <a href="https://docs.feathersjs.com/guides/advanced/creating-a-plugin.html" target="_blank" rel="noreferrer">Feathers plugins</a>, so you will find most of the required information in the linked Feathers documentation.</p><h3 id="running-tests" tabindex="-1">Running tests <a class="header-anchor" href="#running-tests" aria-label="Permalink to &quot;Running tests&quot;">​</a></h3><p>To run the module tests including linting and coverage : <code>$ npm run test</code></p><p>To speed-up things simply run the tests with: <code>$ npm run mocha</code></p><p>To speed-up things even more run a single test suite with: <code>$ npm run mocha -- --grep &quot;test suite name&quot;</code></p><h2 id="publish" tabindex="-1">Publish <a class="header-anchor" href="#publish" aria-label="Permalink to &quot;Publish&quot;">​</a></h2><h3 id="modules-and-plugins" tabindex="-1">Modules and plugins <a class="header-anchor" href="#modules-and-plugins" aria-label="Permalink to &quot;Modules and plugins&quot;">​</a></h3><p>We rely on <a href="https://lerna.js.org/" target="_blank" rel="noreferrer">Lerna</a> to handle the publishing process, including version number update, changelog generation based on conventional commits, etc. It should take care of updating the version of all dependent plugins to the latest version published. Use the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GitHub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> authentication</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GH_TOKEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This requires you to have a NPM and GitHub account and be a team member of the Weacast organization, if you&#39;d like to become a maintainer please tell us.</p></div><h3 id="docker-images" tabindex="-1">Docker images <a class="header-anchor" href="#docker-images" aria-label="Permalink to &quot;Docker images&quot;">​</a></h3><p>Because Weacast API and demo application are also released as Docker images, you can build it manually like this in release mode (i.e. with all modules linked to their latest version):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Demo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The demo application image depends on the weacast API image so that the build order is important.</p></div><p>Then release it as latest version:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast</span></span></code></pre></div><p>And tag it (<code>version_tag</code> being the current version number like <code>1.1.2</code>)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-api:version_tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast-api:version_tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast:version_tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weacast/weacast:version_tag</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This requires you to have a DockerHub account and be a team member of the Weacast organization, if you&#39;d like to become a maintainer please tell us</p></div><p><strong>However, our GitHub CI should build the images for you as you push the tag of the release</strong></p>`,75),l=[n];function r(o,p,h,d,c,k){return e(),s("div",null,l)}const F=a(t,[["render",r]]);export{u as __pageData,F as default};
